<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="create UiModule for registration editor and other" enabled="true" name="ui_module">/**&#13;
 * @author ${user}&#13;
 */&#13;
@SuppressWarnings("unchecked")&#13;
public class ${bobject}UiModule&#13; extends AViewModule
{&#13;
	public static final int VIS_OBJ_ID = ;&#13;
	&#13;
	private static final String SEARCH_LISTTYPE = ${search};&#13;
&#13;
	private static final Class CONTRIBUTE_EDITOR_CLASS = ${bobject}.class;&#13;
	&#13;
	public static final Map&lt;String, String&gt; PROPERTY_TO_LABEL_MAP = new MapBuilder()&#13;
		//add here labels&#13;
		.build();&#13;
&#13;
	/**&#13;
	 * Contributes viskanobject id to IMenuConfigurator so menu item gets loaded.&#13;
	 * @see AuthModule#buildMenuConfigurator(com.viskan.framework.core.auth.menu.IMenuDao, LoggedUserInfo, java.util.Collection)&#13;
	 */&#13;
	public static void contributeMenuConfigurator(Configuration&lt;Integer&gt; editorIdList)&#13;
	{&#13;
		editorIdList.add(VIS_OBJ_ID);&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Contributes builder for {@link EditorFactory} &#13;
	 */&#13;
	public static void contributeEditorFactory(&#13;
			MappedConfiguration&lt;Class, IEditorBuilder&gt; builders,&#13;
			EditorTopComponentBuilder topComponentBuilder &#13;
			) &#13;
	{&#13;
		builders.add(&#13;
				CONTRIBUTE_EDITOR_CLASS, &#13;
				new ${bobject}EditorBuilder(topComponentBuilder, PROPERTY_TO_LABEL_MAP));&#13;
	}&#13;
&#13;
   /**&#13;
	 * Configure property-label map&#13;
	 *  &#13;
	 * @see PropertyToLabelMap&#13;
	 */&#13;
	public static void contributePropertyToLabelMap(Configuration&lt;PropertyLabels&gt; maps)&#13;
	{&#13;
		PropertyLabels labels = new PropertyLabels(${bobject}.class, SEARCH_LISTTYPE);
		//add needed labels here for example:labels.add(TM_FLG, "ui_31055");
		maps.add(labels);
		
	}&#13;
	&#13;
	&#13;
	/**&#13;
	 * Contributes EditorExtension for Blockcode to {@link IEditorRegistry}	&#13;
	 * @see UiModule#buildEditorRegistry	 &#13;
	 */&#13;
	public static void contributeEditorRegistry(&#13;
		MappedConfiguration&lt;EditorInfo, EditorExtension&gt; editorTypes,		&#13;
		INavigatorTopComponent navigator, &#13;
		IValidationTopComponent validation, &#13;
		I${bobject}Dao dao) &#13;
	{&#13;
		addEditorType(&#13;
				editorTypes, &#13;
				createEditorInfo(), &#13;
				new EditorLogic&lt;AEditorTopComponent, ${bobject}&gt;(dao, navigator, validation));&#13;
	}&#13;
	&#13;
	/**&#13;
	 * @return EditorInfo for &#13;
	 */&#13;
	private static EditorInfo createEditorInfo()&#13;
	{&#13;
		return new EditorInfo.Builder()&#13;
			.viskaObjectId(VIS_OBJ_ID)&#13;
			.editorClass(CONTRIBUTE_EDITOR_CLASS)&#13;
			.newEditorTitleKey()&#13;
			.build();&#13;
	}&#13;
	&#13;
	/**&#13;
	 * Contributes SearchExtension for {@link ${bobject}}&#13;
	 * @see SearchModule#buildSearchNavigator()	&#13;
	 */&#13;
	public static void contributeSearchNavigator(MappedConfiguration&lt;Integer, SearchExtension&gt; extensions)&#13;
	{&#13;
		extensions.add(VIS_OBJ_ID, new SearchExtension(SEARCH_LISTTYPE));&#13;
	}&#13;
&#13;
}</template></templates>
